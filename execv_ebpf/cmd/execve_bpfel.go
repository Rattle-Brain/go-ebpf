// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadExecve returns the embedded CollectionSpec for execve.
func loadExecve() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExecveBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load execve: %w", err)
	}

	return spec, err
}

// loadExecveObjects loads execve and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*execveObjects
//	*execvePrograms
//	*execveMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExecveObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExecve()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// execveSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execveSpecs struct {
	execveProgramSpecs
	execveMapSpecs
}

// execveSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execveProgramSpecs struct {
	HandleEnterExecv *ebpf.ProgramSpec `ebpf:"handle_enter_execv"`
}

// execveMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execveMapSpecs struct {
	ExecEventMap *ebpf.MapSpec `ebpf:"exec_event_map"`
}

// execveObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExecveObjects or ebpf.CollectionSpec.LoadAndAssign.
type execveObjects struct {
	execvePrograms
	execveMaps
}

func (o *execveObjects) Close() error {
	return _ExecveClose(
		&o.execvePrograms,
		&o.execveMaps,
	)
}

// execveMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExecveObjects or ebpf.CollectionSpec.LoadAndAssign.
type execveMaps struct {
	ExecEventMap *ebpf.Map `ebpf:"exec_event_map"`
}

func (m *execveMaps) Close() error {
	return _ExecveClose(
		m.ExecEventMap,
	)
}

// execvePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExecveObjects or ebpf.CollectionSpec.LoadAndAssign.
type execvePrograms struct {
	HandleEnterExecv *ebpf.Program `ebpf:"handle_enter_execv"`
}

func (p *execvePrograms) Close() error {
	return _ExecveClose(
		p.HandleEnterExecv,
	)
}

func _ExecveClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed execve_bpfel.o
var _ExecveBytes []byte
