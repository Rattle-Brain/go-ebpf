// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package probe

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type monitorOpenatEventData struct {
	Syscall int8
	_       [3]byte
	Pid     uint32
	Uid     uint32
	Comm    [16]int8
	File    [64]int8
	_       [4]byte
	TsEnter uint64
	TsExit  uint64
	Ret     int32
	_       [4]byte
}

// loadMonitor returns the embedded CollectionSpec for monitor.
func loadMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load monitor: %w", err)
	}

	return spec, err
}

// loadMonitorObjects loads monitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*monitorObjects
//	*monitorPrograms
//	*monitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// monitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorSpecs struct {
	monitorProgramSpecs
	monitorMapSpecs
}

// monitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorProgramSpecs struct {
	TraceEnterOpen *ebpf.ProgramSpec `ebpf:"trace_enter_open"`
	TraceExitOpen  *ebpf.ProgramSpec `ebpf:"trace_exit_open"`
}

// monitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorMapSpecs struct {
	FileEventMap *ebpf.MapSpec `ebpf:"file_event_map"`
	TempMem      *ebpf.MapSpec `ebpf:"temp_mem"`
}

// monitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorObjects struct {
	monitorPrograms
	monitorMaps
}

func (o *monitorObjects) Close() error {
	return _MonitorClose(
		&o.monitorPrograms,
		&o.monitorMaps,
	)
}

// monitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorMaps struct {
	FileEventMap *ebpf.Map `ebpf:"file_event_map"`
	TempMem      *ebpf.Map `ebpf:"temp_mem"`
}

func (m *monitorMaps) Close() error {
	return _MonitorClose(
		m.FileEventMap,
		m.TempMem,
	)
}

// monitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorPrograms struct {
	TraceEnterOpen *ebpf.Program `ebpf:"trace_enter_open"`
	TraceExitOpen  *ebpf.Program `ebpf:"trace_exit_open"`
}

func (p *monitorPrograms) Close() error {
	return _MonitorClose(
		p.TraceEnterOpen,
		p.TraceExitOpen,
	)
}

func _MonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed monitor_bpfel.o
var _MonitorBytes []byte
