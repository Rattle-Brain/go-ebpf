// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package syswrite

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type writeWriteEventData struct {
	Syscall int8
	_       [3]byte
	Pid     uint32
	Uid     uint32
	Comm    [16]int8
	_       [4]byte
	Fd      uint64
	TsEnter uint64
	TsExit  uint64
	Ret     int32
	_       [4]byte
}

// loadWrite returns the embedded CollectionSpec for write.
func loadWrite() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_WriteBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load write: %w", err)
	}

	return spec, err
}

// loadWriteObjects loads write and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*writeObjects
//	*writePrograms
//	*writeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadWriteObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadWrite()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// writeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type writeSpecs struct {
	writeProgramSpecs
	writeMapSpecs
}

// writeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type writeProgramSpecs struct {
	TraceExitWrite       *ebpf.ProgramSpec `ebpf:"trace_exit_write"`
	TracepointEnterWrite *ebpf.ProgramSpec `ebpf:"tracepoint_enter_write"`
}

// writeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type writeMapSpecs struct {
	FileEventMap *ebpf.MapSpec `ebpf:"file_event_map"`
	TempMem      *ebpf.MapSpec `ebpf:"temp_mem"`
}

// writeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadWriteObjects or ebpf.CollectionSpec.LoadAndAssign.
type writeObjects struct {
	writePrograms
	writeMaps
}

func (o *writeObjects) Close() error {
	return _WriteClose(
		&o.writePrograms,
		&o.writeMaps,
	)
}

// writeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadWriteObjects or ebpf.CollectionSpec.LoadAndAssign.
type writeMaps struct {
	FileEventMap *ebpf.Map `ebpf:"file_event_map"`
	TempMem      *ebpf.Map `ebpf:"temp_mem"`
}

func (m *writeMaps) Close() error {
	return _WriteClose(
		m.FileEventMap,
		m.TempMem,
	)
}

// writePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadWriteObjects or ebpf.CollectionSpec.LoadAndAssign.
type writePrograms struct {
	TraceExitWrite       *ebpf.Program `ebpf:"trace_exit_write"`
	TracepointEnterWrite *ebpf.Program `ebpf:"tracepoint_enter_write"`
}

func (p *writePrograms) Close() error {
	return _WriteClose(
		p.TraceExitWrite,
		p.TracepointEnterWrite,
	)
}

func _WriteClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed write_bpfel.o
var _WriteBytes []byte
