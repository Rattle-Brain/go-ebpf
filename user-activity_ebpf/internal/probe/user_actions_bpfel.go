// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package probe

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadUser_actions returns the embedded CollectionSpec for user_actions.
func loadUser_actions() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_User_actionsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load user_actions: %w", err)
	}

	return spec, err
}

// loadUser_actionsObjects loads user_actions and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*user_actionsObjects
//	*user_actionsPrograms
//	*user_actionsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUser_actionsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUser_actions()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// user_actionsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type user_actionsSpecs struct {
	user_actionsProgramSpecs
	user_actionsMapSpecs
}

// user_actionsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type user_actionsProgramSpecs struct {
	TraceLogin  *ebpf.ProgramSpec `ebpf:"trace_login"`
	TraceLogout *ebpf.ProgramSpec `ebpf:"trace_logout"`
}

// user_actionsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type user_actionsMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// user_actionsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUser_actionsObjects or ebpf.CollectionSpec.LoadAndAssign.
type user_actionsObjects struct {
	user_actionsPrograms
	user_actionsMaps
}

func (o *user_actionsObjects) Close() error {
	return _User_actionsClose(
		&o.user_actionsPrograms,
		&o.user_actionsMaps,
	)
}

// user_actionsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUser_actionsObjects or ebpf.CollectionSpec.LoadAndAssign.
type user_actionsMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *user_actionsMaps) Close() error {
	return _User_actionsClose(
		m.Events,
	)
}

// user_actionsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUser_actionsObjects or ebpf.CollectionSpec.LoadAndAssign.
type user_actionsPrograms struct {
	TraceLogin  *ebpf.Program `ebpf:"trace_login"`
	TraceLogout *ebpf.Program `ebpf:"trace_logout"`
}

func (p *user_actionsPrograms) Close() error {
	return _User_actionsClose(
		p.TraceLogin,
		p.TraceLogout,
	)
}

func _User_actionsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed user_actions_bpfel.o
var _User_actionsBytes []byte
