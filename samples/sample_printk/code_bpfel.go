// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadCode returns the embedded CollectionSpec for code.
func loadCode() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CodeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load code: %w", err)
	}

	return spec, err
}

// loadCodeObjects loads code and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*codeObjects
//	*codePrograms
//	*codeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCodeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCode()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// codeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type codeSpecs struct {
	codeProgramSpecs
	codeMapSpecs
	codeVariableSpecs
}

// codeProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type codeProgramSpecs struct {
	ExamplePrintkTrace *ebpf.ProgramSpec `ebpf:"example_printk_trace"`
}

// codeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type codeMapSpecs struct {
}

// codeVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type codeVariableSpecs struct {
}

// codeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCodeObjects or ebpf.CollectionSpec.LoadAndAssign.
type codeObjects struct {
	codePrograms
	codeMaps
	codeVariables
}

func (o *codeObjects) Close() error {
	return _CodeClose(
		&o.codePrograms,
		&o.codeMaps,
	)
}

// codeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCodeObjects or ebpf.CollectionSpec.LoadAndAssign.
type codeMaps struct {
}

func (m *codeMaps) Close() error {
	return _CodeClose()
}

// codeVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadCodeObjects or ebpf.CollectionSpec.LoadAndAssign.
type codeVariables struct {
}

// codePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCodeObjects or ebpf.CollectionSpec.LoadAndAssign.
type codePrograms struct {
	ExamplePrintkTrace *ebpf.Program `ebpf:"example_printk_trace"`
}

func (p *codePrograms) Close() error {
	return _CodeClose(
		p.ExamplePrintkTrace,
	)
}

func _CodeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed code_bpfel.o
var _CodeBytes []byte
